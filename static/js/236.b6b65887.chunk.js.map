{"version":3,"file":"static/js/236.b6b65887.chunk.js","mappings":"8SAOMA,EAAmBC,EAAAA,OAAW,CAClCC,KAAMD,EAAAA,SAAaE,IAAI,IAAIC,SAAS,kCACpCC,MAAOJ,EAAAA,SAAaI,QAAQD,SAAS,mCACrCE,SAAUL,EAAAA,SAAaM,IAAI,GAAGH,SAAS,wCAG5BI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,GAAI,CAAEC,eAAgB,UAAtC,UACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKH,GAAI,CAAEI,MAAO,KAAOC,EAAG,EAA5B,WACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,2BACA,SAAC,KAAD,CACEpB,iBAAkBA,EAClBqB,cApBY,CACpBnB,KAAM,GACNG,MAAO,GACPC,SAAU,IAkBFgB,SAhBW,SAAC,EAAD,GAA+C,IAA5CpB,EAA2C,EAA3CA,KAAMG,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAA8B,EAAhBiB,UACjD,IAAKrB,IAASG,IAAUC,EACtB,OAAOkB,EAAAA,GAAAA,MAAY,gCAErBf,GAASgB,EAAAA,EAAAA,IAAS,CAAEvB,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,IAElC,EAOO,SAKG,SAAAoB,GACC,OACE,UAAC,KAAD,YACE,UAACf,EAAA,GAAD,CAAMC,WAAS,EAACe,UAAU,SAA1B,WACE,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,MAAM,WACNC,YAAY,SAAC,KAAD,CAAc7B,KAAK,SAC/B8B,OAAO,QAEP9B,KAAK,OACL+B,KAAK,OACLC,MAAOR,EAAMS,OAAOjC,MAAQwB,EAAMU,QAAQlC,QAE5C,SAAC,KAAD,CACE0B,GAAIC,EAAAA,EACJC,MAAM,QACNC,YAAY,SAAC,KAAD,CAAc7B,KAAK,UAC/B8B,OAAO,QAEP9B,KAAK,QACL+B,KAAK,QACLC,MAAOR,EAAMS,OAAO9B,OAASqB,EAAMU,QAAQ/B,SAG7C,SAAC,KAAD,CACEuB,GAAIC,EAAAA,EACJC,MAAM,WACNC,YAAY,SAAC,KAAD,CAAc7B,KAAK,aAC/B8B,OAAO,QAEP9B,KAAK,WACL+B,KAAK,WACLC,MAAOR,EAAMS,OAAO7B,UAAYoB,EAAMU,QAAQ9B,eAKlD,SAACK,EAAA,GAAD,CAAMC,WAAS,EAACyB,UAAW,EAAGvB,eAAe,SAA7C,UACE,SAACwB,EAAA,EAAD,CAAQC,KAAK,QAAQnB,QAAQ,YAAYa,KAAK,SAA9C,wBAMP,UAMZ,ECpFD,EAHiB,WACf,OAAO,SAACzB,EAAD,GACR,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { toast } from 'react-hot-toast';\n// import { Button } from 'components/Button/Button';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Grid, TextField, Paper, Box, Typography, Button } from '@mui/material';\nimport * as yup from 'yup';\nconst validationSchema = yup.object({\n  name: yup.string().max(12).required('You forgot to enter your name!'),\n  email: yup.string().email().required('You forgot to enter your email!'),\n  password: yup.string().min(8).required('You forgot to enter your password!'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const initualValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    if (!name || !email || !password) {\n      return toast.error('The fields must be filled in');\n    }\n    dispatch(register({ name, email, password }));\n    // resetForm();\n  };\n\n  return (\n    <Grid container sx={{ justifyContent: 'center' }}>\n      <Paper>\n        <Box sx={{ width: 450 }} p={5}>\n          <Typography variant=\"h4\">Registration</Typography>\n          <Formik\n            validationSchema={validationSchema}\n            initialValues={initualValues}\n            onSubmit={handleSubmit}\n          >\n            {props => {\n              return (\n                <Form>\n                  <Grid container direction=\"column\">\n                    <Field\n                      as={TextField}\n                      label=\"Username\"\n                      helperText={<ErrorMessage name=\"name\" />}\n                      margin=\"dense\"\n                      // fullWidth\n                      name=\"name\"\n                      type=\"text\"\n                      error={props.errors.name && props.touched.name}\n                    />\n                    <Field\n                      as={TextField}\n                      label=\"Email\"\n                      helperText={<ErrorMessage name=\"email\" />}\n                      margin=\"dense\"\n                      // fullWidth\n                      name=\"email\"\n                      type=\"email\"\n                      error={props.errors.email && props.touched.email}\n                    />\n\n                    <Field\n                      as={TextField}\n                      label=\"Password\"\n                      helperText={<ErrorMessage name=\"password\" />}\n                      margin=\"dense\"\n                      // fullWidth\n                      name=\"password\"\n                      type=\"password\"\n                      error={props.errors.password && props.touched.password}\n                    />\n\n                    {/* <Button variant=\"default\" type=\"submit\" title=\"Login\" /> */}\n                  </Grid>\n                  <Grid container marginTop={1} justifyContent=\"center\">\n                    <Button size=\"large\" variant=\"contained\" type=\"submit\">\n                      Create\n                    </Button>\n                  </Grid>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Box>\n      </Paper>\n    </Grid>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\nexport default Register;\n"],"names":["validationSchema","yup","name","max","required","email","password","min","RegisterForm","dispatch","useDispatch","Grid","container","sx","justifyContent","Paper","Box","width","p","Typography","variant","initialValues","onSubmit","resetForm","toast","register","props","direction","as","TextField","label","helperText","margin","type","error","errors","touched","marginTop","Button","size"],"sourceRoot":""}