{"version":3,"file":"static/js/682.5a2a71c3.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactsItem/ContactsItem.styled.js","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\nconst animationFunc = `cubic-bezier(.17,.67,.28,.85) 300ms`;\n\nconst Container = styled(Form)`\n  display: flex;\n  align-items: flex-end;\n  margin: 10px 0 25px 0;\n  gap: 15px;\n`;\nconst ErrorNotify = styled(ErrorMessage)`\n  position: absolute;\n  font-style: italic;\n  color: #cc2c04;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 17px;\n  font-weight: 500;\n  color: #e2580a;\n`;\nconst Input = styled(Field)`\n  padding: 5px 5px 5px 12px;\n  border: none;\n  border-radius: 10px;\n  height: 30px;\n  transition: outline ${animationFunc};\n  :focus {\n    outline: 1px solid #e2580a;\n  }\n  ::placeholder {\n    padding-left: 5px;\n    font-size: 15px;\n    color: #ffffff;\n  }\n  font-size: 15px;\n  color: #d7d7d7;\n  background-color: #585a63;\n`;\nconst SubmitBtn = styled.button`\n  border-radius: 10px;\n  border: none;\n  background-color: #e2580a;\n`;\nexport { Input, Container, Label, SubmitBtn, ErrorNotify };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\nconst selectFilter = state => state.filter;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\nconst selectIsLoading = state => state.contacts.isLoading;\nconst selectError = state => state.contacts.error;\nexport {\n  selectContacts,\n  selectFilteredContacts,\n  selectFilter,\n  selectIsLoading,\n  selectError,\n};\n","// Styles\nimport { Container, Input, Label, ErrorNotify } from './ContactsForm.styled';\n// import { CreateContactBtn } from 'components/Button/Button.styled';\nimport { Button } from 'components/Button/Button';\n\n// Formik\nimport { Formik } from 'formik';\n// PropTypes\n// import PropTypes from 'prop-types';\n// Yup\nimport * as Yup from 'yup';\nimport 'yup-phone';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\n// Validation Schema\nconst schema = Yup.object().shape({\n  name: Yup.string('Enter the letters!').required(\n    'You forgot to enter a name!'\n  ),\n  number: Yup.string('Enter a numbers please!')\n    .required('You forgot to enter a number!')\n    .phone('UA', true, 'Enter UA number format!'),\n});\n\n// Form\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const constacts = useSelector(selectContacts);\n  // console.log(constacts);\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    const contactData = { name, number };\n    if (constacts.some(item => item.name === name)) {\n      alert('You have the same contact already  ');\n      resetForm();\n      return;\n    }\n    dispatch(addContact(contactData));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Container autoComplete=\"on\">\n        <div>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n          </Label>\n\n          <ErrorNotify name=\"name\" component=\"div\" />\n        </div>\n        <div>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              id=\"phone\"\n              placeholder=\"Enter number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            />\n          </Label>\n\n          <ErrorNotify name=\"number\" component=\"div\" />\n        </div>\n        <Button variant=\"submit\" title=\"Add\" type=\"submit\" />\n      </Container>\n    </Formik>\n  );\n};\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  font-size: 20px;\n\n  align-items: baseline;\n  gap: 5px;\n`;\nconst Item = styled.li`\n  min-width: 300px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\nconst Name = styled.span`\n  font-style: italic;\n  /* color: #e2580a; */\n`;\nconst Number = styled.span`\n  font-weight: 500;\n`;\n\nexport { Item, Name, Number, Container };\n","import { Item, Name, Number, Container } from './ContactsItem.styled';\nimport PropTypes from 'prop-types';\nimport { Button } from 'components/Button/Button';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\n\nconst ContactsItem = ({\n  id,\n  name: nameValue,\n  number: numberValue,\n  deleteContact,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(nameValue);\n  const [number, setNumber] = useState(numberValue);\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    const inputName = e.target.name;\n    if (inputName) {\n      setName(inputValue);\n      return;\n    }\n    setNumber(inputValue);\n  };\n  const handleChangeMode = () => {\n    if (isEdit) {\n      setIsEdit(prv => !prv);\n      if (!name || !number) {\n        alert('You forgot to enter your contacts data!');\n        return;\n      }\n      if (name === nameValue && number === numberValue) {\n        alert('Nothing to change.');\n        return;\n      }\n      dispatch(editContact({ id, name, number }));\n      return;\n    }\n    setIsEdit(prv => !prv);\n  };\n  return (\n    <Item>\n      <Container>\n        {isEdit ? (\n          <>\n            <input\n              onChange={handleChange}\n              onFocus={e => e.target.select()}\n              defaultValue={nameValue}\n              name=\"name\"\n              type=\"text\"\n            />\n            <input\n              onChange={handleChange}\n              onFocus={e => e.target.select()}\n              defaultValue={numberValue}\n              name=\"number\"\n              type=\"text\"\n            />\n          </>\n        ) : (\n          <>\n            <Name>{nameValue}: </Name>\n            <Number> {numberValue}</Number>\n          </>\n        )}\n      </Container>\n      <Button\n        variant=\"delete\"\n        title={isEdit ? 'Save' : 'Edit'}\n        type=\"button\"\n        onClick={handleChangeMode}\n      />\n      <Button\n        variant=\"delete\"\n        title=\"Delete\"\n        type=\"button\"\n        onClick={deleteContact}\n      />\n    </Item>\n  );\n};\n\nContactsItem.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n};\nexport default ContactsItem;\n","import styled from '@emotion/styled';\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  margin-top: 15px;\n  padding: 15px 270px 15px 15px;\n  background-color: #585a63;\n`;\nexport { List };\n","import ContactsItem from 'components/ContactsItem';\nimport { List } from './ContactsList.styled';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectFilteredContacts);\n  return (\n    <List>\n      {contacts.map(({ name, number, id }) => (\n        <ContactsItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={() => {\n            dispatch(deleteContact(id));\n          }}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\nconst Form = styled.form`\n  display: flex;\n  align-items: flex-end;\n  margin: 10px 0;\n  gap: 15px;\n`;\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 17px;\n  font-weight: 500;\n  color: #e2580a;\n`;\nconst Input = styled.input`\n  padding: 5px 5px 5px 12px;\n  border: none;\n  border-radius: 10px;\n  height: 30px;\n  :focus {\n    outline: 1px solid #e2580a;\n  }\n  ::placeholder {\n    padding-left: 5px;\n    font-size: 15px;\n    color: #ffffff;\n  }\n  font-size: 15px;\n  color: #d7d7d7;\n  background-color: #585a63;\n`;\nconst SubmitBtn = styled.button`\n  font-size: 22px;\n  color: #ffffff;\n  width: 150px;\n  height: 50px;\n  padding: auto 50px;\n  border-radius: 10px;\n  border: none;\n  background-color: #e2580a;\n`;\nexport { Input, Form, Label, SubmitBtn };\n","import { Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsFilterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n  return (\n    <Input\n      onChange={e => dispatch(filterContacts(e.target.value))}\n      value={value}\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Enter a name to search\"\n    />\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nconst Message = styled.p`\n  font-size: 17px;\n  color: #e2580a;\n  font-weight: 600;\n`;\nexport { Message };\n","import { Message } from './Notification.styled';\nimport PropTypes from 'prop-types';\nconst Notification = ({ message }) => {\n  return <Message>{message ?? 'No contacts with the entered name!'}</Message>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { AddContactsBtn } from 'components/Button/Button.styled';\nimport ContactsForm from 'components/ContactsForm';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport Notification from 'components/Notification';\nimport { useEffect, useState } from 'react';\nimport { BsPencilFill } from 'react-icons/bs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  // console.log(contacts);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleContactBar = () => {\n    setIsOpen(true);\n  };\n  return (\n    <div\n      style={{\n        padding: 20,\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: '#DBD7D7',\n      }}\n    >\n      <div\n        style={{\n          minWidth: 680,\n          borderRadius: 10,\n          padding: 30,\n          backgroundColor: '#32343B ',\n        }}\n      >\n        <div></div>\n        <h1>Phonebook</h1>\n        {isOpen || !!contacts.length ? (\n          <ContactsForm />\n        ) : (\n          <AddContactsBtn onClick={toggleContactBar}>\n            Add your contacts\n            <BsPencilFill size={40} />\n          </AddContactsBtn>\n        )}\n        <div>\n          <h2>Contacts</h2>\n          <Filter />\n        </div>\n        {!contacts.length ? (\n          <Notification message=\"No contacts with the entered name!\" />\n        ) : (\n          <ContactsList />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["Container","styled","Form","ErrorNotify","ErrorMessage","Label","Input","Field","selectContacts","state","contacts","items","selectFilter","filter","selectFilteredContacts","createSelector","filterValue","normalizedFilter","toLowerCase","name","includes","schema","Yup","shape","required","number","phone","dispatch","useDispatch","constacts","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","contactData","some","item","alert","addContact","autoComplete","type","placeholder","title","component","id","Button","variant","Item","Name","Number","nameValue","numberValue","deleteContact","useState","isEdit","setIsEdit","setName","setNumber","handleChange","e","inputValue","target","value","onChange","onFocus","select","defaultValue","onClick","prv","editContact","List","map","filterContacts","Message","message","isOpen","setIsOpen","useEffect","fetchContacts","style","padding","display","justifyContent","flexDirection","alignItems","color","minWidth","borderRadius","backgroundColor","length","size"],"sourceRoot":""}