{"version":3,"file":"static/js/836.bf8f3a5d.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.jsx","components/ContactsItem/ContactsItem.styled.js","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.styled.js","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/SkeletonLoader/SkeletonLoader.jsx","pages/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, Form, ErrorMessage } from 'formik';\nconst animationFunc = `cubic-bezier(.17,.67,.28,.85) 300ms`;\n\nconst Container = styled(Form)`\n  display: flex;\n  align-items: flex-end;\n  margin: 10px 0 25px 0;\n  gap: 15px;\n`;\nconst ErrorNotify = styled(ErrorMessage)`\n  position: absolute;\n  font-style: italic;\n  color: #cc2c04;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 17px;\n  font-weight: 500;\n  color: #e2580a;\n`;\nconst Input = styled(Field)`\n  padding: 5px 5px 5px 12px;\n  border: none;\n  border-radius: 10px;\n  height: 30px;\n  transition: outline ${animationFunc};\n  :focus {\n    outline: 1px solid #e2580a;\n  }\n  ::placeholder {\n    padding-left: 5px;\n    font-size: 15px;\n    color: #ffffff;\n  }\n  font-size: 15px;\n  color: #d7d7d7;\n  background-color: #585a63;\n`;\nconst SubmitBtn = styled.button`\n  border-radius: 10px;\n  border: none;\n  background-color: #e2580a;\n`;\nexport { Input, Container, Label, SubmitBtn, ErrorNotify };\n","// Styles\nimport { Container, Input, Label, ErrorNotify } from './ContactsForm.styled';\n// import { CreateContactBtn } from 'components/Button/Button.styled';\nimport { Button } from 'components/Button/Button';\n\n// Formik\nimport { Formik } from 'formik';\n// PropTypes\n// import PropTypes from 'prop-types';\n// Yup\nimport * as Yup from 'yup';\nimport 'yup-phone';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\n// Validation Schema\nconst schema = Yup.object().shape({\n  name: Yup.string('Enter the letters!').required(\n    'You forgot to enter a name!'\n  ),\n  number: Yup.string('Enter a numbers please!')\n    .required('You forgot to enter a number!')\n    .phone('UA', true, 'Enter UA number format!'),\n});\n\n// Form\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const constacts = useSelector(selectContacts);\n  // console.log(constacts);\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    const contactData = { name, number };\n    if (constacts.some(item => item.name === name)) {\n      alert('You have the same contact already  ');\n      resetForm();\n      return;\n    }\n    dispatch(addContact(contactData));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Container autoComplete=\"on\">\n        <div>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            />\n          </Label>\n\n          <ErrorNotify name=\"name\" component=\"div\" />\n        </div>\n        <div>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              id=\"phone\"\n              placeholder=\"Enter number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            />\n          </Label>\n\n          <ErrorNotify name=\"number\" component=\"div\" />\n        </div>\n        <Button variant=\"submit\" title=\"Add\" type=\"submit\" />\n      </Container>\n    </Formik>\n  );\n};\n\nexport default ContactsForm;\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  font-size: 20px;\n\n  align-items: baseline;\n  gap: 5px;\n`;\nconst Item = styled.li`\n  position: relative;\n  min-width: 300px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 20px;\n`;\nconst Name = styled.span`\n  font-style: italic;\n  /* color: #e2580a; */\n`;\nconst Number = styled.span`\n  font-weight: 500;\n`;\n\nexport { Item, Name, Number, Container };\n","import { Item, Name, Number, Container } from './ContactsItem.styled';\nimport PropTypes from 'prop-types';\nimport { Button } from 'components/Button/Button';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport toast from 'react-hot-toast';\nimport { Formik, Form, Field } from 'formik';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst ContactsItem = ({\n  id,\n  name: nameValue,\n  number: numberValue,\n  deleteContact,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [isNeedDisable, setIsNeedDisable] = useState(false);\n  const [timeoutId, setTimeoutId] = useState(null);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const initialValues = {\n    name: nameValue,\n    number: numberValue,\n  };\n  //\n  useEffect(() => {\n    return () => clearTimeout(timeoutId);\n  }, [timeoutId]);\n  //\n  const toggleIsEdit = () => {\n    setIsEdit(prev => !prev);\n  };\n  //\n  const handleEdit = e => {\n    return toggleIsEdit();\n  };\n  //\n  const handleSubmit = ({ name, number }) => {\n    const trimmedName = name.trim();\n    const trimmedNumber = number.trim();\n    if (!trimmedName || !trimmedNumber) {\n      toast.error('You forgot to enter your contacts data!');\n      return;\n    }\n    if (trimmedName === nameValue && trimmedNumber === numberValue) {\n      toast.error('Nothing to change.');\n      return toggleIsEdit();\n    }\n    if (contacts.some(contact => contact.name.trim() === trimmedName)) {\n      setIsNeedDisable(true);\n      setTimeoutId(setTimeout(() => setIsNeedDisable(false), 3000));\n      if (contacts.some(contact => contact.number.trim() === trimmedNumber)) {\n        return toast.error(`${number} is already in your contacts!`);\n      }\n      return toast.error(`${name} is already in your contacts!`);\n    }\n\n    dispatch(editContact({ id, name: trimmedName, number: trimmedNumber }));\n    return toggleIsEdit();\n  };\n\n  return (\n    <Item>\n      <Container>\n        {!isEdit ? (\n          <>\n            <Name>{nameValue}: </Name>\n            <Number> {numberValue}</Number>\n          </>\n        ) : (\n          <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n            <Form\n              style={{\n                display: 'flex',\n                gap: 10,\n              }}\n            >\n              <Field\n                style={{\n                  color: '#dbd7d7',\n                  backgroundColor: 'transparent',\n                  outline: '#e2580a solid 1px',\n                  borderRadius: 10,\n                  paddingLeft: 10,\n                  border: 'none',\n                }}\n                onFocus={e => e.target.select()}\n                name=\"name\"\n                type=\"text\"\n              />\n              <Field\n                style={{\n                  color: '#dbd7d7',\n                  backgroundColor: 'transparent',\n                  outline: '#e2580a  solid 1px',\n                  borderRadius: 10,\n                  paddingLeft: 10,\n                  border: 'none',\n                }}\n                onFocus={e => e.target.select()}\n                name=\"number\"\n                type=\"text\"\n              />\n              <Button\n                disabled={isNeedDisable}\n                variant=\"edit\"\n                title=\"Save\"\n                type=\"submit\"\n              />\n            </Form>\n          </Formik>\n        )}\n      </Container>\n      {!isEdit && (\n        <Button\n          variant=\"edit\"\n          title=\"Edit\"\n          type=\"button\"\n          onClick={handleEdit}\n        />\n      )}\n      <Button\n        variant=\"delete\"\n        title=\"Delete\"\n        type=\"button\"\n        onClick={deleteContact}\n      />\n      {/*      \n          <Container>\n            {isEdit ? (\n                 <Formik>\n        <Form>\n          \n            <Field\n                  onChange={handleChange}\n                  onFocus={e => e.target.select()}\n                  defaultValue={nameValue}\n                  name=\"name\"\n                  type=\"text\"\n                />\n                <Field\n                  onChange={handleChange}\n                  onFocus={e => e.target.select()}\n                  defaultValue={numberValue}\n                  name=\"number\"\n                  type=\"text\"\n                />\n            ) : (\n              <>\n                <Name>{nameValue}: </Name>\n                <Number> {numberValue}</Number>\n            )}\n          </Container>\n          <Button\n            variant=\"edit\"\n            title={isEdit ? 'Save' : 'Edit'}\n            type=\"button\"\n            onClick={handleChangeMode}\n          />\n        </Form>\n      </Formik>\n      <Button\n        variant=\"delete\"\n        title=\"Delete\"\n        type=\"button\"\n        onClick={deleteContact}\n      /> */}\n    </Item>\n  );\n};\n\nContactsItem.propTypes = {\n  deleteContact: PropTypes.func.isRequired,\n};\nexport default ContactsItem;\n","import styled from '@emotion/styled';\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  margin-top: 15px;\n  padding: 15px 270px 15px 15px;\n  background-color: #585a63;\n  border-radius: 5px;\n`;\nexport { List };\n","import styled from '@emotion/styled';\n\nconst Message = styled.p`\n  margin: 15px 0 0 0;\n  font-size: 17px;\n  color: #e2580a;\n  font-weight: 600;\n`;\nexport { Message };\n","import { Message } from './Notification.styled';\nimport PropTypes from 'prop-types';\nconst Notification = ({ message }) => {\n  return <Message>{message ?? 'No contacts with the entered name!'}</Message>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import ContactsItem from 'components/ContactsItem';\nimport { List } from './ContactsList.styled';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport Notification from 'components/Notification';\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  return !!filteredContacts.length ? (\n    <List>\n      {filteredContacts.map(({ name, number, id }) => (\n        <ContactsItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={() => {\n            dispatch(deleteContact(id));\n          }}\n        />\n      ))}\n    </List>\n  ) : (\n    <Notification message=\"No contacts with the entered name here!\" />\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\nconst Form = styled.form`\n  display: flex;\n  align-items: flex-end;\n  margin: 10px 0;\n  gap: 15px;\n`;\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 17px;\n  font-weight: 500;\n  color: #e2580a;\n`;\nconst Input = styled.input`\n  padding: 5px 5px 5px 12px;\n  border: none;\n  border-radius: 10px;\n  height: 30px;\n  :focus {\n    outline: 1px solid #e2580a;\n  }\n  ::placeholder {\n    padding-left: 5px;\n    font-size: 15px;\n    color: #ffffff;\n  }\n  font-size: 15px;\n  color: #d7d7d7;\n  background-color: #585a63;\n`;\nconst SubmitBtn = styled.button`\n  font-size: 22px;\n  color: #ffffff;\n  width: 150px;\n  height: 50px;\n  padding: auto 50px;\n  border-radius: 10px;\n  border: none;\n  background-color: #e2580a;\n`;\nexport { Input, Form, Label, SubmitBtn };\n","import { Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsFilterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n  return (\n    <Input\n      onChange={e => dispatch(filterContacts(e.target.value))}\n      value={value}\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Enter a name to search\"\n    />\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport ContentLoader from 'react-content-loader';\nconst Container = styled.main`\n  display: flex;\n  justify-content: center;\n`;\nconst SkeletonLoader = props => (\n  <Container>\n    <ContentLoader\n      speed={2}\n      width={600}\n      height={500}\n      viewBox=\"0 0 600 500\"\n      backgroundColor=\"#383942\"\n      foregroundColor=\"#808f9d\"\n      {...props}\n    >\n      <rect x=\"5\" y=\"175\" rx=\"2\" ry=\"2\" width=\"250\" height=\"22\" />\n      <rect x=\"5\" y=\"208\" rx=\"2\" ry=\"2\" width=\"211\" height=\"33\" />\n      <rect x=\"225\" y=\"208\" rx=\"2\" ry=\"2\" width=\"211\" height=\"33\" />\n      <rect x=\"5\" y=\"256\" rx=\"2\" ry=\"2\" width=\"250\" height=\"16\" />\n      <rect x=\"3\" y=\"281\" rx=\"2\" ry=\"2\" width=\"211\" height=\"32\" />\n      <rect x=\"3\" y=\"319\" rx=\"2\" ry=\"2\" width=\"593\" height=\"107\" />\n      <rect x=\"502\" y=\"216\" rx=\"2\" ry=\"2\" width=\"97\" height=\"36\" />\n    </ContentLoader>\n  </Container>\n);\n\nexport default SkeletonLoader;\n","import { AddContactsBtn } from 'components/Button/Button.styled';\nimport ContactsForm from 'components/ContactsForm';\nimport ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport SkeletonLoader from 'components/SkeletonLoader/SkeletonLoader';\nimport Notification from 'components/Notification';\nimport { useAuth } from 'hooks';\nimport { useEffect, useState } from 'react';\nimport { BsPencilFill } from 'react-icons/bs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const { isRefreshing } = useAuth();\n  // const isLoading = useSelector(selectIsLoading);\n  // console.log(contacts);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const toggleContactBar = () => {\n    setIsOpen(true);\n  };\n  return isRefreshing ? (\n    <SkeletonLoader />\n  ) : (\n    <div\n      style={{\n        padding: 20,\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: '#DBD7D7',\n      }}\n    >\n      <div\n        style={{\n          minWidth: 680,\n          borderRadius: 10,\n          padding: 30,\n          backgroundColor: '#32343B ',\n        }}\n      >\n        <div></div>\n        <h1>Phonebook</h1>\n        {isOpen || !!contacts.length ? (\n          <ContactsForm />\n        ) : (\n          <AddContactsBtn onClick={toggleContactBar}>\n            Add your contacts\n            <BsPencilFill size={40} />\n          </AddContactsBtn>\n        )}\n        <div>\n          <h2>Contacts</h2>\n          <Filter />\n        </div>\n        {!contacts.length ? (\n          <Notification message=\"No contacts with the entered name!\" />\n        ) : (\n          <ContactsList />\n        )}\n      </div>\n    </div>\n  );\n};\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\nconst selectFilter = state => state.filter;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n    const result = contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n    return result;\n  }\n);\nconst selectIsLoading = state => state.contacts.isLoading;\nconst selectError = state => state.contacts.error;\nexport {\n  selectContacts,\n  selectFilteredContacts,\n  selectFilter,\n  selectIsLoading,\n  selectError,\n};\n"],"names":["Container","styled","Form","ErrorNotify","ErrorMessage","Label","Input","Field","schema","Yup","shape","name","required","number","phone","dispatch","useDispatch","constacts","useSelector","selectContacts","initialValues","validationSchema","onSubmit","values","resetForm","contactData","some","item","alert","addContact","autoComplete","type","placeholder","title","component","id","Button","variant","Item","Name","Number","nameValue","numberValue","deleteContact","useState","isEdit","setIsEdit","isNeedDisable","setIsNeedDisable","timeoutId","setTimeoutId","contacts","useEffect","clearTimeout","toggleIsEdit","prev","trimmedName","trim","trimmedNumber","toast","contact","setTimeout","editContact","style","display","gap","color","backgroundColor","outline","borderRadius","paddingLeft","border","onFocus","e","target","select","disabled","onClick","List","Message","message","filteredContacts","selectFilteredContacts","length","map","value","selectFilter","onChange","filterContacts","props","speed","width","height","viewBox","foregroundColor","x","y","rx","ry","isRefreshing","useAuth","isOpen","setIsOpen","fetchContacts","padding","justifyContent","flexDirection","alignItems","minWidth","size","state","items","filter","createSelector","filterValue","normalizedFilter","toLowerCase","includes"],"sourceRoot":""}