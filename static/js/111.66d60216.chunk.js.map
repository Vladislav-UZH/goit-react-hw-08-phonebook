{"version":3,"file":"static/js/111.66d60216.chunk.js","mappings":"oSAMMA,EAAmBC,EAAAA,OAAW,CAClCC,MAAOD,EAAAA,SAAaC,QAAQC,SAAS,mCACrCC,SAAUH,EAAAA,SAAaI,IAAI,GAAGF,SAAS,wCAE5BG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MASjB,OACE,SAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,GAAI,CAAEC,eAAgB,UAAtC,UACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKH,GAAI,CAAEI,MAAO,KAAOC,EAAG,EAA5B,WACE,SAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,oBACA,SAAC,KAAD,CACElB,iBAAkBA,EAClBmB,cAfY,CACpBjB,MAAO,GACPE,SAAU,IAcFgB,SAZW,SAAC,EAAD,GAAyC,IAAtClB,EAAqC,EAArCA,MAAOE,EAA8B,EAA9BA,SAAciB,EAAgB,EAAhBA,UAC3Cd,GAASe,EAAAA,EAAAA,IAAM,CAAEpB,MAAAA,EAAOE,SAAAA,KACxBiB,GACD,EAMO,SAKG,SAAAE,GACC,OACE,UAAC,KAAD,YACE,UAACd,EAAA,GAAD,CAAMC,WAAS,EAACc,UAAU,SAA1B,WACE,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,MAAM,QACNC,YAAY,SAAC,KAAD,CAAcC,KAAK,UAC/BC,OAAO,QAEPD,KAAK,QACLE,KAAK,QACLC,MAAOT,EAAMU,OAAO/B,OAASqB,EAAMW,QAAQhC,SAG7C,SAAC,KAAD,CACEuB,GAAIC,EAAAA,EACJC,MAAM,WACNC,YAAY,SAAC,KAAD,CAAcC,KAAK,aAC/BC,OAAO,QAEPD,KAAK,WACLE,KAAK,WACLC,MAAOT,EAAMU,OAAO7B,UAAYmB,EAAMW,QAAQ9B,eAKlD,SAACK,EAAA,GAAD,CAAMC,WAAS,EAACyB,UAAW,EAAGvB,eAAe,SAA7C,UACE,SAACwB,EAAA,EAAD,CAAQC,KAAK,QAAQnB,QAAQ,YAAYa,KAAK,SAA9C,uBAMP,UAMZ,EClED,EAHc,WACZ,OAAO,SAACzB,EAAD,GACR,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["// import { Button } from 'components/Button/Button';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/operations';\nimport { Grid, TextField, Paper, Box, Typography, Button } from '@mui/material';\nimport * as yup from 'yup';\nconst validationSchema = yup.object({\n  email: yup.string().email().required('You forgot to enter your email!'),\n  password: yup.string().min(8).required('You forgot to enter your password!'),\n});\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const initualValues = {\n    email: '',\n    password: '',\n  };\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(login({ email, password }));\n    resetForm();\n  };\n  return (\n    <Grid container sx={{ justifyContent: 'center' }}>\n      <Paper>\n        <Box sx={{ width: 450 }} p={5}>\n          <Typography variant=\"h4\">Login</Typography>\n          <Formik\n            validationSchema={validationSchema}\n            initialValues={initualValues}\n            onSubmit={handleSubmit}\n          >\n            {props => {\n              return (\n                <Form>\n                  <Grid container direction=\"column\">\n                    <Field\n                      as={TextField}\n                      label=\"Email\"\n                      helperText={<ErrorMessage name=\"email\" />}\n                      margin=\"dense\"\n                      // fullWidth\n                      name=\"email\"\n                      type=\"email\"\n                      error={props.errors.email && props.touched.email}\n                    />\n\n                    <Field\n                      as={TextField}\n                      label=\"Password\"\n                      helperText={<ErrorMessage name=\"password\" />}\n                      margin=\"dense\"\n                      // fullWidth\n                      name=\"password\"\n                      type=\"password\"\n                      error={props.errors.password && props.touched.password}\n                    />\n\n                    {/* <Button variant=\"default\" type=\"submit\" title=\"Login\" /> */}\n                  </Grid>\n                  <Grid container marginTop={1} justifyContent=\"center\">\n                    <Button size=\"large\" variant=\"contained\" type=\"submit\">\n                      Login\n                    </Button>\n                  </Grid>\n                </Form>\n              );\n            }}\n          </Formik>\n        </Box>\n      </Paper>\n    </Grid>\n  );\n};\n\n//   <Grid container sx={{ justifyContent: 'center' }}>\n//     <Paper>\n//       <Box p={5}>\n//         <Typography variant=\"h4\">Login</Typography>\n//         <Formik initialValues={initualValues} onSubmit={handleSubmit}>\n//           {props => {\n//             return (\n//               <Form>\n//                 <Field\n//                   as={TextField}\n//                   label=\"Email\"\n//                   helperText={<ErrorMessage name=\"email\" />}\n//                   margin=\"dense\"\n//                   fullWidth\n//                   name=\"email\"\n//                   type=\"email\"\n//                   error={props.errors.email && props.touched.email}\n//                 />\n\n//                 <Field\n//                   as={TextField}\n//                   label=\"Password\"\n//                   helperText={<ErrorMessage name=\"password\" />}\n//                   margin=\"dense\"\n//                   fullWidth\n//                   name=\"password\"\n//                   type=\"password\"\n//                   error={props.errors.password && props.touched.password}\n//                 />\n\n//                 <Button variant=\"default\" type=\"submit\" title=\"Login\" />\n//               </Form>\n//             );\n//           }}\n//         </Formik>\n//       </Box>\n//     </Paper>\n//   </Grid>;\n// }\n//\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return <LoginForm />;\n};\nexport default Login;\n"],"names":["validationSchema","yup","email","required","password","min","LoginForm","dispatch","useDispatch","Grid","container","sx","justifyContent","Paper","Box","width","p","Typography","variant","initialValues","onSubmit","resetForm","login","props","direction","as","TextField","label","helperText","name","margin","type","error","errors","touched","marginTop","Button","size"],"sourceRoot":""}